@using LifeCoachManagement.Data
@model IEnumerable<LifeCoachManagement.Models.Assignment>
@{
    ViewData["Title"] = "Assignments List";
}

<h2>Assignments List</h2>

<div class="row">
    <div class="col-md-4">
        <div class="form-group">
            <label for="searchInput">Search:</label>
            <input type="text" class="form-control" id="searchInput" placeholder="Search by name or description">
        </div>
    </div>
    <div class="col-md-4">
        <div class="form-group">
            <label for="categoryFilter">Category:</label>
            <select class="form-control" id="categoryFilter">
                <option value="">All Categories</option>
                @foreach (var category in ViewBag.Categories)
                {
                    <option value="@category.Name">@category.Name</option>
                }
            </select>
        </div>
    </div>
    <div class="col-md-4">
        <div class="form-group">
            <label for="statusFilter">Status:</label>
            <select class="form-control" id="statusFilter">
                <option value="">All Statuses</option>
                @foreach (var status in ViewBag.Statuses)
                {
                    <option value="@status">@status</option>
                }
            </select>
        </div>
    </div>
</div>

<div class="row" id="assignmentsList">
    @foreach (var assignment in Model)
    {
        <div class="col-md-4 assignment" data-category="@assignment.Category.Name" data-status="@assignment.Status">
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title name">@assignment.Name</h5>
                    <p class="card-text">Category:@assignment.Category.Name</p>
                    <p class="card-text">Status:@assignment.Status</p>
                    <p class="card-text card-description">Description: @assignment.Description</p>
                    <p class="card-text">Desired Results: @assignment.DesiredResults</p>
                    <p class="card-text">Submission Date: @assignment.SubmissionDate.ToShortDateString()</p>
                    <p class="card-text">Deadline: @assignment.Deadline.ToShortDateString()</p>
                    <p class="card-text">Budget: @assignment.Budget</p>
                    <p class="card-text">Assigned User: @(assignment.AssignedUser != null ? assignment.AssignedUser.UserName : "To be assigned")</p>
                    <form asp-action="ChangeStatus" asp-route-id="@assignment.Id" method="post">
                        @if (assignment.Status == Status.ForReview && User.IsInRole(Roles.Admin.ToString()))
                        {
                            <input type="hidden" name="newStatus" value="Completed" />
                            <button type="submit" class="btn btn-success">Mark as Completed</button>
                        }
                        @if (assignment.Status == Status.Pending && User.IsInRole(Roles.Admin.ToString()))
                        {
                            <input type="hidden" name="newStatus" value="Cancelled" />
                            <button type="submit" class="btn btn-warning">Cancel</button>
                        }
                    </form>
                    @if (assignment.Status == Status.AssignedToCoach && User.IsInRole(Roles.Coach.ToString()))
                    {
                        <a asp-action="Edit" asp-route-id="@assignment.Id" class="btn btn-primary">Edit</a>
                    }
                    @if (User.IsInRole(Roles.Admin.ToString()))
                    {
                        <a asp-action="Edit" asp-route-id="@assignment.Id" class="btn btn-primary">Edit</a>
                        <form asp-action="Delete" asp-route-id="@assignment.Id" method="post" onsubmit="return confirm('Are you sure you want to delete this assignment?');">
                            <button type="submit" class="btn btn-danger">Delete</button>
                        </form>
                    }
                </div>
            </div>
        </div>
    }
</div>

<a asp-action="Create" class="btn btn-success">Add New Assignment</a>

@section scripts {
    <script>
        function filterAssignments() {
            // Get the category and status from the input fields
            var category = document.getElementById("categoryFilter").value.toLowerCase();
            var status = document.getElementById("statusFilter").value.toLowerCase();

            console.log(category.name);
            console.log(status);
            // Get all the assignment elements
            var assignments = document.querySelectorAll(".assignment");

            // Loop through each assignment element and check if it matches the filters
            assignments.forEach(function (assignment) {
                var categoryValue = assignment.getAttribute("data-category").toLowerCase();
                var statusValue = assignment.getAttribute("data-status").toLowerCase();

                // Check if the assignment matches the filters
                var categoryMatches = category === "" || categoryValue === category;
                var statusMatches = status === "" || statusValue === status;

                // If at least one filter matches, display the assignment; otherwise, hide it
                if (categoryMatches && statusMatches) {
                    assignment.style.display = "";
                } else {
                    assignment.style.display = "none";
                }
            });
        }

        function searchAssignments() {
            // Get the search query from the input field
            var query = document.getElementById("searchInput").value.trim().toLowerCase();

            // Get all the assignment elements
            var assignments = document.querySelectorAll(".assignment");

            // Loop through each assignment element and check if the name or description matches the search query
            assignments.forEach(function (assignment) {
                var nameElement = assignment.querySelector('.name');
                var descriptionElement = assignment.querySelector('.card-description');

                var name = nameElement.innerText.trim().toLowerCase();
                var description = descriptionElement.innerText.trim().toLowerCase();

                // If the assignment's name or description contains the search query, display it; otherwise, hide it
                if (name.includes(query) || description.includes(query)) {
                    assignment.style.display = "";
                } else {
                    assignment.style.display = "none";
                }
            });
        }

        // Add event listeners to the search input field, category filter, and status filter
        var searchInput = document.getElementById("searchInput");
        searchInput.addEventListener("keyup", function () {
            // Call the searchAssignments function
            searchAssignments();
        });

        var categoryFilter = document.getElementById("categoryFilter");
        categoryFilter.addEventListener("change", function () {
            // Call the filterAssignments function
            filterAssignments();
        });

        var statusFilter = document.getElementById("statusFilter");
        statusFilter.addEventListener("change", function () {
            // Call the filterAssignments function
            filterAssignments();
        });

        // Initialize the filters on page load
        filterAssignments();
        searchAssignments();
    </script>
}
